;; First authored by Shon Feder in 2019

type SHOWABLE =
{
  type t;
  show : t -> Text.text;
};

Text =
{
  include Text;
  show = id;
};

Bool =
{
  include Bool;
  show b = if b then "true" else "false";
};

Int =
{
  include Int;
  show = primitive "Int.show";
};

type OPT = {
  include OPT;
  isSome 'a : opt a -> bool;
  isNone 'a : opt a -> bool;
  map 'a 'b: (a -> b) -> opt a -> opt b;
  show 'a: (M:SHOWABLE) -> opt a -> Text.text;
};

Opt = {
  include Opt;

  isSome s = caseopt s
    (fun () => false)
    (fun _  => true);

  isNone s = Bool.not (isSome s);

  map f xo = caseopt xo
    (fun () => none)
    (fun x  => some (f x));

  show (M:SHOWABLE) xo = caseopt xo
    (fun () => "none")
    (fun x  => "some " ++ M.show x);

  print (M:SHOWABLE) = Text.print << (show M);
};
include Opt;
