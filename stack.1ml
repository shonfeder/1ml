;; First authored by Shon Feder in 2019

type STACK = {
  type t a;
  new 'a : t a;
  push 'a : t a -> a -> t a;

  ;; Only needed to work around bug in type checker that's preventing use of the
  ;; clearer and more concise type declaration: t a -> opt (t a, a)
  type pair a = (t a, a);
  pop 'a : t a -> opt (pair a);

  isEmpty 'a : t a -> bool;
  size 'a : t a -> int;
};

Stack :> STACK = {
  type t a = {size: int; content: list a};

  new 'a = {size = 0; content = List.nil};

  push 'a (s : t a) x =
    let size' = s.size + 1 in
    let content' = s.content in
    {size = size' + 1; content = List.cons x content'};

  peek 'a (s : t a) =
    let content = s.content in
    List.head content;

  ;; TODO rm when type checking bug is fixed
  type pair a = (t a, a);

  pop 'a (s : t a) =
    let content = s.content in
    caseopt (List.tail content)
      (fun () => Opt.none)
      (fun content' => caseopt (List.head content)
        (fun () => Opt.none)
        (fun x =>
          let size' = s.size - 1 in
          let s' = {size = size'; content = content'} in
          Opt.some (s', x)));

  isEmpty 'a (s : t a) =
    let content = s.content in
    List.isNil content;

  size 'a (s : t a) = s.size
};
